# Проект: Колдовстворец - веб-сайт с реализацией клиентской и серверной части

## Описание

Этот проект представляет собой многостраничное веб-приложение, содержащее различные интерактивные страницы, такие как новости, информация о поступлении, учебные материалы, и многое другое. В проекте также реализован REST API для работы со студентами, который позволяет добавлять, получать, обновлять и удалять информацию о студентах. Основной язык программирования на стороне сервера — **PHP**, а база данных реализована с использованием **MySQL** через **phpMyAdmin**.

Все страницы проекта являются интерактивными и содержат элементы, которые позволяют пользователю взаимодействовать с контентом. JavaScript используется для обработки пользовательских событий и рендеринга динамического контента.

Проект был разработан в рамках учебного процесса и включает в себя различные техники и технологии, такие как организация системы контроля версий, создание и управление базой данных, взаимодействие с сервером, а также разработку REST API и консольных приложений.

## Функциональность

Проект включает следующие функции:

1. **REST API** для работы с данными студентов, предоставляющий следующие возможности:
   - **Добавление студента** (POST запрос).
   - **Получение всех студентов** (GET запрос).
   - **Обновление данных студента** (PUT запрос).
   - **Удаление студента** (DELETE запрос).

2. **Интерактивные страницы**:
   - Новости.
   - Информация о поступлении.
   - Учебные материалы.
   - Чеклисты.
   - Формы для добавления данных.

3. **PHP-скрипты** для работы с базой данных и консольные приложения.
4. **Использование базы данных MySQL** для хранения информации о студентах.
5. **Интерфейс для отправки данных** и отображения сообщения об успешном добавлении студента.
6. **Организация системы контроля версий** с использованием Git и GitHub.
7. **Обработка различных типов HTTP запросов** через REST API.
8. **Взаимодействие с сервером со стороны клиентской части** с использованием JavaScript для отправки запросов и обработки успешных/неуспешных запросов.

## Структура Проекта

Проект состоит из следующих файлов и папок:

- `checklist/`:
  - `check.html`: Страница с функционалом чеклиста.
  - `check.js`: JavaScript для работы с чеклистом.
  - `check.css`: Стили для страницы чеклиста.

- `img_main/`: Содержит изображения, используемые на сайте, например:
  - `зелье.jpg`, `квид.jpg`, `логотип.png`, `фон.jpg` и другие файлы изображений.

- `news/`:
  - `news.html`: Страница новостей.
  - `news.js`: JavaScript для работы с функционалом новостей.
  - `news.css`: Стили для страницы новостей.
  - `фз.jpg`: Изображение, используемое на странице новостей.

- `postupl/`:
  - `postupl.html`: Страница с информацией о поступлении.
  - `postupl.js`: JavaScript для работы с данной страницей.
  - `postupl.css`: Стили для страницы поступления.
  - `дуэль.webp`: Изображение для страницы поступления.

- `putgeo/`:
  - `putgeo.html`: Страница с географической информацией.
  - `putgeo.js`: JavaScript для работы с данной страницей.
  - `putgeo.css`: Стили для страницы.
  - `9-5.jpg`, `вок.jpg`: Изображения, используемые на странице.

- `uchen/`:
  - `uchen.html`: Страница с информацией об обучении.
  - `uchen.js`: JavaScript для работы с данной страницей.
  - `uchen.css`: Стили для страницы обучения.

- Основные файлы проекта:
  - `db.php`: Подключение к базе данных MySQL.
  - `index.html`: Главная страница с формой для отправки сообщений и/или данных студентов.
  - `script.js`: Основной JavaScript для функционала сайта, в том числе для взаимодействия с сервером, отправки запросов и обработки событий.
  - `Skandal.ttf`: Шрифт, используемый в проекте.
  - `students_api.php`: Реализует REST API для работы с базой данных студентов. Поддерживает методы GET, POST, PUT и DELETE.
  - `students_console.php`: PHP скрипт для работы с консольными запросами к студентам.
  - `styles.css`: Основные стили для всего проекта.
  - `submit.php`: Обработка данных, отправленных через форму, и добавление их в базу данных.

## Используемые Технологии

- **PHP**: Основной язык для серверной части проекта.
- **MySQL**: База данных для хранения информации о студентах.
- **phpMyAdmin**: Используется для управления базой данных.
- **HTML/CSS/JavaScript**: Используются для создания клиентской части проекта, обработки пользовательских событий и рендеринга динамического контента.
- **Git и GitHub**: Для организации системы контроля версий.
- **Postman**: Инструмент для тестирования REST API запросов.

## Развертывание Проекта

### Шаги по развертыванию

1. **Установка XAMPP**
   - Для запуска проекта локально требуется XAMPP (или другой стек, поддерживающий PHP и MySQL).
   - Запустите **Apache** и **MySQL** через XAMPP Control Panel.

2. **Импорт Базы Данных**
   - Откройте **phpMyAdmin** через `http://localhost/phpmyadmin`.
   - Создайте базу данных `contact_form`.
   - Создайте таблицу `students` со следующими полями:
     - `id` (INT, PRIMARY KEY, AUTO_INCREMENT)
     - `name` (VARCHAR(100))
     - `email` (VARCHAR(100))

3. **Копирование файлов в директорию сервера**
   - Поместите все файлы проекта в папку `C:\\xampp\\htdocs\\repo23-main`.

4. **Запуск Проекта**
   - Откройте браузер и перейдите по адресу `http://localhost/repo23-main/index.html` для работы с веб-интерфейсом.
   - Для работы с API используйте `http://localhost/repo23-main/students_api.php` и Postman для отправки запросов (GET, POST, PUT, DELETE).

## Использование REST API

- **GET** запрос: Получить всех студентов.
  - URL: `http://localhost/repo23-main/students_api.php`
  - Ответ: Список студентов в формате JSON.

- **POST** запрос: Добавить нового студента.
  - URL: `http://localhost/repo23-main/students_api.php`
  - Тело запроса (JSON):
    ```json
    {
      "name": "Гарри Поттер",
      "email": "harry.potter@example.com"
    }
    ```

- **PUT** запрос: Обновить данные студента.
  - URL: `http://localhost/repo23-main/students_api.php`
  - Тело запроса (JSON):
    ```json
    {
      "id": 1,
      "name": "Гермиона Грейнджер",
      "email": "hermione@example.com"
    }
    ```

- **DELETE** запрос: Удалить студента.
  - URL: `http://localhost/repo23-main/students_api.php`
  - Тело запроса (JSON):
    ```json
    {
      "id": 1
    }
    ```

## Замечания

- Для работы с API на локальном сервере, убедитесь, что **Apache** и **MySQL** запущены через XAMPP.
- Для тестирования API рекомендуется использовать **Postman** или `curl`.
- Если проект будет перенесен на удалённый сервер, измените настройки подключения к базе данных в файле `db.php`.

## Авторы

Проект создан в рамках обучения и практики использования веб-технологий. Основные компоненты включают серверную часть на PHP, работу с базами данных MySQL, и реализацию REST API.

## Лицензия

Этот проект открыт для использования в учебных целях.
